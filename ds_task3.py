# -*- coding: utf-8 -*-
"""ds_task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KfZvXs85xXAHhuDgkpsyF7Q0Ivrv8uHY
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Student_Performance.csv')

df['Hours Studied'].fillna(df['Hours Studied'].mean(), inplace=True)
df.dropna(inplace=True)

for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

X = df.drop("Performance Index", axis=1)
y = df["Performance Index"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(random_state=42)
}

results = []

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)
    results.append((name, mse, rmse, r2))
    print(f"{name} R²: {r2:.4f}, RMSE: {rmse:.4f}")

results_df = pd.DataFrame(results, columns=['Model', 'Mean Squared Error', 'Root Mean Squared Error', 'R-squared'])
print("\nModel Performance Comparison:\n", results_df)

plt.figure(figsize=(8, 6))
sns.barplot(x='Model', y='R-squared', data=results_df, palette='viridis')
plt.ylim(0, 1)
plt.title("Model Comparison - R² Scores")
plt.xlabel("Model")
plt.ylabel("R-squared")
plt.tight_layout()
plt.show()

rf_model = models["Random Forest"]
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)
plt.figure(figsize=(10, 6))
feature_importances.sort_values().plot(kind='barh', color='skyblue')
plt.title("Feature Importance (Random Forest)")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()

