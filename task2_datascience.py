# -*- coding: utf-8 -*-
"""task2_datascience.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uw62hFnt3RoG-EjTXr7NsFCJoHrtn5lX
"""

from google.colab import files
uploaded =files.upload()

import pandas as pd
df = pd.read_csv('diabetes.csv')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("First 5 records:\n", df.head(10))
print("\nTarget variable distribution:\n", df['outcome'].value_counts())

print("\nMissing values:\n", df.isnull().sum())

X = df.drop('outcome', axis=1)
y = df['outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test)

model=LogisticRegression()
model.fit(X_train_scaled,y_train)

y_pred=model.predict(X_test_scaled)

print('\n Accuracy:',accuracy_score(y_test,y_pred))
print('\n Confusion Matrix:\n',confusion_matrix(y_test,y_pred))
print('\n Classification Report:\n',classification_report(y_test,y_pred))

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='outcome', data=df,color='grey')
plt.title("Diabetes Outcome Distribution")
plt.xlabel("Outcome (0 = No Diabetes, 1 = Diabetes)")
plt.ylabel("Count")
plt.show()

import numpy as np

unique, counts = np.unique(y_pred, return_counts=True)
prediction_summary = dict(zip(unique, counts))

print("\n Prediction Summary:")
print(f"No Diabetes (0): {prediction_summary.get(0, 0)}")
print(f"Has Diabetes (1): {prediction_summary.get(1, 0)}")

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

